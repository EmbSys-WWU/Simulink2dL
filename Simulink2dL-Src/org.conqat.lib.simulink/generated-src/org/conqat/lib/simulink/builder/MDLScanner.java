/* The following code was generated by JFlex 1.4.2 on 02.12.19, 13:58 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2004  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


   
/* $Author: deissenb $
   $Revision: 5448 $ */

package org.conqat.lib.simulink.builder;

import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 02.12.19, 13:58 from the specification file
 * <tt>C:/Privat/Workspaces/workspace_simulink2dl/Parser/grammars/mdl.flex</tt>
 */
public class MDLScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\26"+
    "\1\4\1\7\2\0\1\27\3\0\1\25\1\40\1\10\1\6\1\7"+
    "\1\13\1\11\2\20\4\21\2\5\1\41\1\42\4\0\1\7\3\17"+
    "\1\22\1\24\1\22\5\12\1\15\10\12\1\14\2\12\1\16\2\12"+
    "\1\36\1\30\1\37\1\23\1\7\1\0\1\17\1\43\1\17\1\22"+
    "\1\24\1\33\5\12\1\15\1\12\1\32\1\31\2\12\1\45\1\12"+
    "\1\44\1\14\2\12\1\16\2\12\1\34\1\0\1\35\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\1\2\4"+
    "\1\5\1\6\1\4\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\3\16\1\17\1\1\1\0\1\3\1\20"+
    "\2\5\1\20\1\0\1\5\1\4\2\5\1\20\2\5"+
    "\1\0\2\5\1\21\1\4\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\20\1\0\1\20"+
    "\2\5\1\20\1\4\2\20\4\5\1\20\2\4\3\5"+
    "\1\33\22\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\1\0\1\5"+
    "\1\20\1\0\5\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\114\0\230\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\114\0\u017c\0\114\0\114\0\114"+
    "\0\114\0\114\0\114\0\114\0\u01a2\0\u01c8\0\114\0\114"+
    "\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\114\0\114\0\u02ac"+
    "\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc"+
    "\0\u0402\0\u0428\0\u010a\0\u044e\0\114\0\114\0\114\0\114"+
    "\0\114\0\114\0\114\0\114\0\114\0\u0474\0\u049a\0\u04c0"+
    "\0\u04e6\0\u010a\0\u010a\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4"+
    "\0\u0662\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de"+
    "\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\u0286\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\7\1\11\1\13\4\11\2\7\1\11\1\3\1\11"+
    "\1\3\1\14\2\3\1\15\2\11\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\11\1\25\1\26\1\27"+
    "\23\25\1\30\1\25\1\31\15\25\47\0\2\4\43\0"+
    "\1\32\2\33\1\32\17\6\1\32\1\6\4\32\3\6"+
    "\7\32\3\6\5\0\1\7\1\34\2\0\1\7\1\0"+
    "\1\7\1\35\1\36\2\0\2\7\1\37\2\40\6\0"+
    "\1\37\17\0\1\34\3\0\1\34\1\0\1\34\4\0"+
    "\2\34\30\0\17\11\1\0\1\11\4\0\3\11\7\0"+
    "\3\11\4\0\1\11\1\41\1\42\2\11\1\43\1\11"+
    "\1\44\4\11\2\41\1\11\1\0\1\11\4\0\3\11"+
    "\7\0\3\11\5\0\1\45\1\34\2\0\1\46\1\0"+
    "\1\47\1\35\1\36\1\50\1\0\1\51\1\52\1\37"+
    "\2\40\6\0\1\37\16\0\17\11\1\0\1\11\4\0"+
    "\1\11\1\53\1\54\7\0\3\11\2\25\1\0\23\25"+
    "\1\0\1\25\1\0\17\25\1\27\23\25\1\0\1\25"+
    "\1\0\15\25\2\55\1\0\23\55\1\56\1\57\1\60"+
    "\1\55\1\61\1\62\7\55\1\63\1\64\1\65\1\32"+
    "\2\33\43\32\1\0\2\33\50\0\1\34\3\0\1\34"+
    "\1\0\1\34\4\0\2\34\1\37\2\40\6\0\1\37"+
    "\27\0\1\36\35\0\1\66\2\0\1\67\1\66\1\0"+
    "\1\66\4\0\2\66\3\0\1\67\24\0\1\11\1\41"+
    "\1\70\2\11\1\41\1\11\1\41\1\71\1\72\2\11"+
    "\2\41\1\73\1\40\1\74\4\0\2\11\1\73\7\0"+
    "\3\11\4\0\1\11\1\70\3\11\1\70\1\11\1\70"+
    "\4\11\2\70\1\11\1\0\1\11\4\0\3\11\7\0"+
    "\3\11\4\0\1\11\1\41\1\75\2\11\1\41\1\11"+
    "\1\41\1\71\1\72\2\11\2\41\1\73\1\40\1\74"+
    "\4\0\2\11\1\73\7\0\3\11\4\0\1\11\1\76"+
    "\1\70\2\11\1\76\1\11\1\76\1\71\1\72\2\11"+
    "\2\76\1\73\1\40\1\74\4\0\2\11\1\73\7\0"+
    "\3\11\5\0\1\45\1\34\2\0\1\45\1\0\1\45"+
    "\4\0\2\45\1\37\2\40\6\0\1\37\17\0\1\45"+
    "\1\34\2\0\1\52\1\0\1\52\2\36\2\0\2\52"+
    "\1\37\2\40\6\0\1\37\17\0\1\45\1\34\2\0"+
    "\1\46\1\0\1\47\2\36\2\0\1\51\1\52\1\37"+
    "\2\40\6\0\1\37\17\0\1\77\3\0\1\77\1\0"+
    "\1\100\3\0\4\77\1\0\1\77\6\0\1\77\7\0"+
    "\1\77\7\0\1\45\1\34\2\0\1\101\1\0\1\101"+
    "\2\36\2\0\2\101\1\37\2\40\6\0\1\37\17\0"+
    "\1\45\1\34\2\0\1\102\1\0\1\102\2\36\2\0"+
    "\2\102\1\37\2\40\6\0\1\37\16\0\17\11\1\0"+
    "\1\11\4\0\2\11\1\53\7\0\3\11\5\0\1\66"+
    "\3\0\1\66\1\0\1\66\4\0\2\66\1\37\10\0"+
    "\1\37\17\0\1\66\3\0\1\66\1\0\1\66\4\0"+
    "\2\66\30\0\1\11\1\70\3\11\1\70\1\11\1\70"+
    "\4\11\2\70\1\73\1\40\1\74\4\0\2\11\1\73"+
    "\7\0\3\11\4\0\11\11\1\72\5\11\1\0\1\11"+
    "\4\0\3\11\7\0\3\11\4\0\1\11\1\103\2\11"+
    "\1\104\1\103\1\11\1\103\4\11\2\103\1\11\1\0"+
    "\1\11\1\67\3\0\3\11\7\0\3\11\4\0\1\105"+
    "\1\70\3\11\1\70\1\11\1\70\4\11\2\70\1\73"+
    "\1\40\1\74\4\0\2\11\1\73\7\0\3\11\4\0"+
    "\1\11\1\76\1\70\2\11\1\76\1\11\1\76\4\11"+
    "\2\76\1\73\1\40\1\74\4\0\2\11\1\73\7\0"+
    "\3\11\5\0\1\106\3\0\1\106\1\0\1\106\2\36"+
    "\1\0\4\106\1\0\1\106\6\0\1\106\7\0\1\106"+
    "\7\0\1\77\3\0\1\77\1\0\1\100\2\36\1\0"+
    "\4\77\1\0\1\77\6\0\1\77\7\0\1\77\7\0"+
    "\1\45\1\34\2\0\1\107\1\0\1\107\2\36\2\0"+
    "\2\107\1\37\2\40\6\0\1\37\17\0\1\45\1\34"+
    "\2\0\1\110\1\0\1\110\2\36\2\0\2\110\1\37"+
    "\2\40\6\0\1\37\16\0\1\11\1\103\3\11\1\103"+
    "\1\11\1\103\4\11\2\103\1\73\1\0\1\11\4\0"+
    "\2\11\1\73\7\0\3\11\4\0\1\11\1\103\3\11"+
    "\1\103\1\11\1\103\4\11\2\103\1\11\1\0\1\11"+
    "\4\0\3\11\7\0\3\11\4\0\1\11\1\111\3\11"+
    "\12\111\1\0\1\111\4\0\3\111\7\0\3\111\5\0"+
    "\1\112\3\0\1\112\1\0\1\112\2\36\1\0\4\112"+
    "\1\0\1\112\6\0\1\112\7\0\1\112\7\0\1\45"+
    "\1\34\2\0\1\113\1\0\1\113\2\36\2\0\2\113"+
    "\1\37\2\40\6\0\1\37\17\0\1\45\1\34\2\0"+
    "\1\114\1\0\1\114\2\36\2\0\2\114\1\37\2\40"+
    "\6\0\1\37\17\0\1\115\3\0\1\115\1\0\1\115"+
    "\2\36\1\0\4\115\1\0\1\115\6\0\1\115\7\0"+
    "\1\115\7\0\1\45\1\34\2\0\1\116\1\0\1\116"+
    "\2\36\2\0\2\116\1\37\2\40\6\0\1\37\17\0"+
    "\1\45\1\34\2\0\1\117\1\0\1\117\2\36\2\0"+
    "\2\117\1\37\2\40\6\0\1\37\17\0\1\120\3\0"+
    "\1\120\1\0\1\120\2\36\1\0\4\120\1\0\1\120"+
    "\6\0\1\120\7\0\1\120\7\0\1\45\1\34\2\0"+
    "\1\121\1\0\1\121\2\36\2\0\2\121\1\37\2\40"+
    "\6\0\1\37\17\0\1\45\1\34\2\0\1\122\1\0"+
    "\1\122\2\36\2\0\2\122\1\37\2\40\6\0\1\37"+
    "\17\0\1\123\3\0\1\123\1\0\1\123\2\36\1\0"+
    "\4\123\1\0\1\123\6\0\1\123\7\0\1\123\7\0"+
    "\1\45\1\34\2\0\1\124\1\0\1\124\2\36\2\0"+
    "\2\124\1\37\2\40\6\0\1\37\17\0\1\45\1\34"+
    "\2\0\1\125\1\0\1\125\2\36\2\0\2\125\1\37"+
    "\2\40\6\0\1\37\17\0\1\126\3\0\1\126\1\0"+
    "\1\126\2\36\1\0\4\126\1\0\1\126\6\0\1\126"+
    "\7\0\1\126\7\0\1\45\1\34\2\0\1\127\1\0"+
    "\1\127\2\36\2\0\2\127\1\37\2\40\6\0\1\37"+
    "\17\0\1\45\1\34\2\0\1\130\1\0\1\130\2\36"+
    "\2\0\2\130\1\37\2\40\6\0\1\37\17\0\1\131"+
    "\3\0\1\131\1\0\1\131\2\36\1\0\4\131\1\0"+
    "\1\131\6\0\1\131\7\0\1\131\7\0\1\45\1\34"+
    "\2\0\1\132\1\0\1\132\2\36\2\0\2\132\1\37"+
    "\2\40\6\0\1\37\17\0\1\45\1\34\2\0\1\133"+
    "\1\0\1\133\2\36\2\0\2\133\1\37\2\40\6\0"+
    "\1\37\17\0\1\134\3\0\1\134\1\0\1\134\2\36"+
    "\1\0\4\134\1\0\1\134\6\0\1\134\7\0\1\134"+
    "\7\0\1\45\1\34\2\0\1\135\1\0\1\135\2\36"+
    "\2\0\2\135\1\37\2\40\6\0\1\37\17\0\1\45"+
    "\1\34\2\0\1\136\1\0\1\136\2\36\2\0\2\136"+
    "\1\37\2\40\6\0\1\37\17\0\1\137\3\0\1\137"+
    "\1\0\1\137\1\0\1\36\1\0\4\137\1\0\1\137"+
    "\6\0\1\137\7\0\1\137\7\0\1\45\1\34\2\0"+
    "\1\140\1\0\1\140\2\36\2\0\2\140\1\37\2\40"+
    "\6\0\1\37\17\0\1\45\1\34\2\0\1\141\1\0"+
    "\1\141\2\36\2\0\2\141\1\37\2\40\6\0\1\37"+
    "\17\0\1\142\3\0\1\142\1\0\1\142\1\0\1\36"+
    "\1\0\4\142\1\0\1\142\6\0\1\142\7\0\1\142"+
    "\7\0\1\45\1\34\2\0\1\143\1\0\1\143\2\36"+
    "\2\0\2\143\1\37\2\40\6\0\1\37\17\0\1\45"+
    "\1\34\2\0\1\144\1\0\1\144\2\36\2\0\2\144"+
    "\1\37\2\40\6\0\1\37\17\0\1\145\3\0\1\145"+
    "\1\0\1\145\1\0\1\36\1\0\4\145\1\0\1\145"+
    "\6\0\1\145\7\0\1\145\7\0\1\45\1\34\2\0"+
    "\1\146\1\0\1\146\2\36\2\0\2\146\1\37\2\40"+
    "\6\0\1\37\17\0\1\45\1\34\2\0\1\147\1\0"+
    "\1\147\2\36\2\0\2\147\1\37\2\40\6\0\1\37"+
    "\17\0\1\150\3\0\1\150\1\0\1\150\1\0\1\36"+
    "\1\0\4\150\1\0\1\150\6\0\1\150\7\0\1\150"+
    "\7\0\1\45\1\34\2\0\1\151\1\0\1\151\2\36"+
    "\2\0\2\151\1\37\2\40\6\0\1\37\17\0\1\45"+
    "\1\34\2\0\1\152\1\0\1\152\2\36\2\0\2\152"+
    "\1\37\2\40\6\0\1\37\17\0\1\153\3\0\1\153"+
    "\1\0\1\153\1\0\1\36\1\0\4\153\1\0\1\153"+
    "\6\0\1\153\7\0\1\153\7\0\1\45\1\34\2\0"+
    "\1\154\1\0\1\154\2\36\2\0\2\154\1\37\2\40"+
    "\6\0\1\37\17\0\1\45\1\34\2\0\1\155\1\0"+
    "\1\155\2\36\2\0\2\155\1\37\2\40\6\0\1\37"+
    "\17\0\1\156\3\0\1\156\1\0\1\156\1\0\1\36"+
    "\1\0\4\156\1\0\1\156\6\0\1\156\7\0\1\156"+
    "\7\0\1\45\1\34\2\0\1\157\1\0\1\157\2\36"+
    "\2\0\2\157\1\37\2\40\6\0\1\37\17\0\1\45"+
    "\1\34\2\0\1\160\1\0\1\160\2\36\2\0\2\160"+
    "\1\37\2\40\6\0\1\37\17\0\1\161\3\0\1\161"+
    "\1\0\1\161\1\0\1\36\1\0\4\161\1\0\1\161"+
    "\6\0\1\161\7\0\1\161\7\0\1\45\1\34\2\0"+
    "\1\162\1\0\1\162\2\36\2\0\2\162\1\37\2\40"+
    "\6\0\1\37\17\0\1\45\1\34\2\0\1\162\1\0"+
    "\1\162\1\0\1\36\2\0\2\162\1\37\2\40\6\0"+
    "\1\37\17\0\1\45\1\34\2\0\1\163\1\0\1\163"+
    "\1\0\1\36\2\0\2\163\1\37\2\40\6\0\1\37"+
    "\17\0\1\45\1\34\2\0\1\164\1\0\1\164\1\0"+
    "\1\36\2\0\2\164\1\37\2\40\6\0\1\37\17\0"+
    "\1\45\1\34\2\0\1\165\1\0\1\165\1\0\1\36"+
    "\2\0\2\165\1\37\2\40\6\0\1\37\17\0\1\45"+
    "\1\34\2\0\1\166\1\0\1\166\1\0\1\36\2\0"+
    "\2\166\1\37\2\40\6\0\1\37\17\0\1\45\1\34"+
    "\2\0\1\45\1\0\1\45\1\0\1\36\2\0\2\45"+
    "\1\37\2\40\6\0\1\37\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3458];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\6\1\1\11\1\1\7\11"+
    "\2\1\2\11\1\1\1\0\3\1\2\11\1\0\7\1"+
    "\1\0\4\1\11\11\1\1\1\0\44\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    /** Builder used for collection of strings. */
    private StringBuilder string = new StringBuilder();
    
    /** Map used as string pool to get rid of duplicate strings. */
    private Map<String, String> stringPool = new HashMap<>();
        
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, String value) {
    	String interned = stringPool.get(value);
    	if (interned == null) {
    		interned = value;
    		stringPool.put (interned, interned);
    	}
    
        return new Symbol(type, yyline, yycolumn, interned);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MDLScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MDLScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { throw new RuntimeException("Illegal Escape :"+yytext()+" at line "+yyline);
          }
        case 28: break;
        case 17: 
          { return symbol(SymbolConstants.BOOLEAN_LITERAL, yytext());
          }
        case 29: break;
        case 15: 
          { yybegin(YYINITIAL); 
                                   return symbol(SymbolConstants.STRING_LITERAL, string.toString());
          }
        case 30: break;
        case 7: 
          { return symbol(SymbolConstants.LBRACE);
          }
        case 31: break;
        case 12: 
          { return symbol(SymbolConstants.COLON);
          }
        case 32: break;
        case 26: 
          { string.append( "\\r" );
          }
        case 33: break;
        case 20: 
          { string.append( "\\'");
          }
        case 34: break;
        case 14: 
          { string.append( yytext() );
          }
        case 35: break;
        case 8: 
          { return symbol(SymbolConstants.RBRACE);
          }
        case 36: break;
        case 2: 
          { return symbol(SymbolConstants.NEWLINE, yytext());
          }
        case 37: break;
        case 11: 
          { return symbol(SymbolConstants.COMMA);
          }
        case 38: break;
        case 24: 
          { string.append( "\\b" );
          }
        case 39: break;
        case 21: 
          { string.append( "\\\\" );
          }
        case 40: break;
        case 5: 
          { return symbol(SymbolConstants.INT_LITERAL, yytext());
          }
        case 41: break;
        case 25: 
          { string.append( "\\t" );
          }
        case 42: break;
        case 9: 
          { return symbol(SymbolConstants.LBRACK);
          }
        case 43: break;
        case 1: 
          { throw new RuntimeException("Illegal Character :"+yytext()+" at line "+yyline);
          }
        case 44: break;
        case 19: 
          { string.append( "\\\"" );
          }
        case 45: break;
        case 10: 
          { return symbol(SymbolConstants.RBRACK);
          }
        case 46: break;
        case 27: 
          { return symbol(SymbolConstants.ERROR_LITERAL, yytext());
          }
        case 47: break;
        case 13: 
          { return symbol(SymbolConstants.SEMICOLON);
          }
        case 48: break;
        case 4: 
          { return symbol(SymbolConstants.IDENTIFIER, yytext());
          }
        case 49: break;
        case 22: 
          { string.append( "\\n" );
          }
        case 50: break;
        case 23: 
          { string.append( "\\f" );
          }
        case 51: break;
        case 16: 
          { return symbol(SymbolConstants.FLOAT_LITERAL, yytext());
          }
        case 52: break;
        case 6: 
          { yybegin(STRING); string.setLength(0);
          }
        case 53: break;
        case 3: 
          { /* ignore */
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(SymbolConstants.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
